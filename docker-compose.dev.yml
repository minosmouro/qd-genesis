# Rede customizada para melhor isolamento e comunicação
networks:
  gandalf_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  postgres:
    image: postgres:15-alpine
    env_file:
      - ./.env.dev
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      # Aumentar limite de conexões (padrão: 100)
      POSTGRES_ARGS: "-c max_connections=200"
    command: postgres -c max_connections=200
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gandalf_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gandalf_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - gandalf_network
    # Healthcheck removido: imagem qdrant não inclui curl/wget
    # O serviço está funcional conforme logs (portas 6333/6334 ativas)

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: gandalf-backend:dev
    env_file:
      - ./.env.dev
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - FERNET_KEY=${FERNET_KEY}
      - FLASK_DEBUG=True
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - TZ=America/Sao_Paulo
      - CORS_ORIGINS=http://localhost:3000,http://localhost:4000,http://localhost:5173,http://localhost:5174,http://127.0.0.1:5173,http://127.0.0.1:5174,http://localhost:13000
    volumes:
      - .:/app
      - ./backend/scripts/wait-for-it.sh:/app/scripts/wait-for-it.sh
    ports:
      - "5000:5000"
    networks:
      - gandalf_network
    dns:
      - 8.8.8.8
    depends_on:
      - postgres
      - redis
    command: ["sh", "-c", "/app/scripts/wait-for-it.sh postgres:5432 && /app/scripts/wait-for-it.sh redis:6379 && python backend/app.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: gandalf-worker:dev
    env_file:
      - ./.env.dev
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - FERNET_KEY=${FERNET_KEY}
      - TZ=America/Sao_Paulo
    volumes:
      - .:/app
      - ./backend/scripts/wait-for-it.sh:/app/scripts/wait-for-it.sh
    networks:
      - gandalf_network
    depends_on:
      - redis
    command: ["sh", "-c", "/app/scripts/wait-for-it.sh postgres:5432 && /app/scripts/wait-for-it.sh redis:6379 && cd /app/backend && celery -A celery_app worker --loglevel=info -Q celery,refresh_scheduler"]
    restart: unless-stopped

  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: gandalf-beat:dev
    env_file:
      - ./.env.dev
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - FERNET_KEY=${FERNET_KEY}
      - TZ=America/Sao_Paulo
    volumes:
      - .:/app
      - ./backend/scripts/wait-for-it.sh:/app/scripts/wait-for-it.sh
    networks:
      - gandalf_network
    depends_on:
      - redis
      - postgres
    command: ["sh", "-c", "/app/scripts/wait-for-it.sh postgres:5432 && /app/scripts/wait-for-it.sh redis:6379 && cd /app/backend && celery -A celery_app beat --loglevel=info --scheduler celery.beat.PersistentScheduler"]
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: quadradois-frontend:dev
    env_file:
      - ./.env.dev
    environment:
      - VITE_API_URL=http://localhost:5000
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    networks:
      - gandalf_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  business-center:
    build:
      context: ./business-center
      dockerfile: Dockerfile
    image: quadradois-business:dev
    env_file:
      - ./.env.dev
    environment:
      - VITE_API_URL=http://localhost:5000
      - NODE_ENV=development
    volumes:
      - ./business-center:/app
      - /app/node_modules
    ports:
      - "4000:4000"
    networks:
      - gandalf_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
