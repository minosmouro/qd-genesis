"""
Teste da refatora√ß√£o - Verifica se os novos services funcionam
"""
import sys
import os
import pytest

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    try:
        # Testar services
        from properties.services.import_service import ImportService
        from properties.services.bulk_service import BulkService
        from properties.services.validation_service import ValidationService
        print("‚úÖ Services importados com sucesso")

        # Testar validators
        from properties.validators.bulk_validator import BulkValidator
        from properties.validators.import_validator import ImportValidator
        print("‚úÖ Validators importados com sucesso")

        # Testar mappers
        from properties.mappers.property_mapper import PropertyMapper
        print("‚úÖ Mappers importados com sucesso")

        # Testar routes
        from properties.routes.import_routes import create_import_routes
        from properties.routes.bulk_routes import create_bulk_routes
        print("‚úÖ Routes importados com sucesso")

        # Testar blueprint principal
        from properties import properties_bp
        print("‚úÖ Properties blueprint importado com sucesso")
    except Exception as e:
        pytest.fail(f"‚ùå Erro na importa√ß√£o: {e}")

def test_validators():
    """Testa os validators"""
    try:
        from properties.validators.bulk_validator import BulkValidator
        from properties.validators.import_validator import ImportValidator

        # Testar BulkValidator
        is_valid, error = BulkValidator.validate_delete_request([1, 2, 3])
        assert is_valid, f"BulkValidator falhou: {error}"
        print("‚úÖ BulkValidator funcionando")

        # Testar ImportValidator
        is_valid, error = ImportValidator.validate_import_payload({
            'external_id': 'TEST123',
            'title': 'Test Property'
        })
        assert is_valid, f"ImportValidator falhou: {error}"
        print("‚úÖ ImportValidator funcionando")
    except Exception as e:
        pytest.fail(f"‚ùå Erro nos validators: {e}")

def test_mapper():
    """Testa o PropertyMapper"""
    try:
        from properties.mappers.property_mapper import PropertyMapper

        # Testar simulate_mapping
        listing = {
            'externalId': 'TEST123',
            'title': 'Test Property',
            'address': {'street': 'Test St'},
            'pricingInfos': [{'price': 100000}]
        }

        result = PropertyMapper.simulate_mapping(listing)
        assert result['external_id'] == 'TEST123'
        assert result['title'] == 'Test Property'
        print("‚úÖ PropertyMapper funcionando")
    except Exception as e:
        pytest.fail(f"‚ùå Erro no mapper: {e}")

if __name__ == "__main__":
    print("üöÄ Testando refatora√ß√£o do m√≥dulo Properties")
    print("=" * 50)

    success = True

    print("\nüì¶ Testando imports...")
    try:
        test_imports()
    except Exception as exc:  # pragma: no cover - apenas execu√ß√£o manual
        print(exc)
        success = False

    print("\nüîç Testando validators...")
    try:
        test_validators()
    except Exception as exc:  # pragma: no cover - apenas execu√ß√£o manual
        print(exc)
        success = False

    print("\nüó∫Ô∏è  Testando mapper...")
    try:
        test_mapper()
    except Exception as exc:  # pragma: no cover - apenas execu√ß√£o manual
        print(exc)
        success = False

    print("\n" + "=" * 50)
    if success:
        print("üéâ Todos os testes passaram! Refatora√ß√£o bem-sucedida.")
    else:
        print("‚ùå Alguns testes falharam. Verifique os erros acima.")
        sys.exit(1)
