#!/usr/bin/env python3
"""
Exemplo de uso dos utilit√°rios de endere√ßo.

Este script demonstra como usar as fun√ß√µes de valida√ß√£o e formata√ß√£o
de endere√ßos implementadas no utils/address_utils.py
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio backend ao path
backend_dir = Path(__file__).parent.parent
sys.path.insert(0, str(backend_dir))

from utils.address_utils import (
    validate_and_format_zip_code,
    extract_address_components,
    format_address_display,
    normalize_address_field
)

def demo_zip_validation():
    """Demonstra a valida√ß√£o e formata√ß√£o de CEP."""
    print("üîç Valida√ß√£o de CEP:")
    print("-" * 40)

    test_zips = [
        "12345-678",  # V√°lido
        "12345678",   # V√°lido sem formata√ß√£o
        "12345",      # Inv√°lido - muito curto
        "123456789",  # Inv√°lido - muito longo
        "abc12345",   # V√°lido ap√≥s limpeza
        "",           # Vazio
        None          # None
    ]

    for zip_code in test_zips:
        is_valid, formatted = validate_and_format_zip_code(zip_code)
        status = "‚úÖ V√°lido" if is_valid else "‚ùå Inv√°lido"
        print(f"'{zip_code}' ‚Üí {status}: {formatted}")

def demo_address_extraction():
    """Demonstra a extra√ß√£o de componentes de endere√ßo."""
    print("\nüè† Extra√ß√£o de Componentes de Endere√ßo:")
    print("-" * 50)

    test_addresses = [
        "Rua das Flores, 123 - Centro, S√£o Paulo - SP, 01234-567",
        "Av. Paulista, 1000, Bela Vista, S√£o Paulo/SP - CEP: 01310-100",
        "Pra√ßa da S√©, s/n - S√© - S√£o Paulo - SP 01001-000",
        "Rua XV de Novembro, 1500 - Centro Hist√≥rico - Curitiba - PR"
    ]

    for addr in test_addresses:
        print(f"\nüìç Endere√ßo: {addr}")
        components = extract_address_components(addr)

        for key, value in components.items():
            if value:
                print(f"  {key.capitalize()}: {value}")

def demo_address_formatting():
    """Demonstra a formata√ß√£o de endere√ßo para exibi√ß√£o."""
    print("\nüìã Formata√ß√£o de Endere√ßo para Exibi√ß√£o:")
    print("-" * 45)

    test_cases = [
        {
            'street': 'Rua das Flores',
            'number': '123',
            'complement': 'Apto 45',
            'neighborhood': 'Centro',
            'city': 'S√£o Paulo',
            'state': 'SP'
        },
        {
            'street': 'Av. Paulista',
            'number': '1000',
            'neighborhood': 'Bela Vista',
            'city': 'S√£o Paulo',
            'state': 'SP'
        },
        {
            'street': 'Pra√ßa da S√©',
            'number': 's/n',
            'neighborhood': 'S√©',
            'city': 'S√£o Paulo',
            'state': 'SP'
        }
    ]

    for case in test_cases:
        formatted = format_address_display(**case)
        print(f"üìç {formatted}")

def demo_field_normalization():
    """Demonstra a normaliza√ß√£o de campos de endere√ßo."""
    print("\nüî§ Normaliza√ß√£o de Campos:")
    print("-" * 35)

    test_fields = [
        "rua das flores",           # Deve capitalizar
        "AVENIDA PAULISTA",         # Deve capitalizar
        "pra√ßa da s√©",              # Deve capitalizar
        "RUA XV DE NOVEMBRO",       # Deve manter mai√∫sculo apenas primeira letra
        "s√£o paulo",                # Deve capitalizar
        "CENTRO HIST√ìRICO",         # Deve manter mai√∫sculo apenas primeira letra
        "",                         # Deve retornar None
        None                        # Deve retornar None
    ]

    for field in test_fields:
        normalized = normalize_address_field(field)
        print(f"'{field}' ‚Üí '{normalized}'")

def main():
    """Executa todas as demonstra√ß√µes."""
    print("üéØ Demonstra√ß√£o dos Utilit√°rios de Endere√ßo")
    print("=" * 50)

    demo_zip_validation()
    demo_address_extraction()
    demo_address_formatting()
    demo_field_normalization()

    print("\n" + "=" * 50)
    print("‚úÖ Demonstra√ß√£o conclu√≠da!")
    print("\nüí° Estes utilit√°rios podem ser usados para:")
    print("  ‚Ä¢ Validar CEPs antes de salvar no banco")
    print("  ‚Ä¢ Extrair componentes de endere√ßos completos")
    print("  ‚Ä¢ Formatar endere√ßos para exibi√ß√£o amig√°vel")
    print("  ‚Ä¢ Normalizar campos de endere√ßo para consist√™ncia")

if __name__ == "__main__":
    main()
