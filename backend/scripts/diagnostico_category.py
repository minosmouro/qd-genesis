"""
Script para adicionar logging DEBUG tempor√°rio e ver EXATAMENTE o que est√° sendo recebido.
"""

print("=" * 80)
print("üîç AN√ÅLISE: O que o backend est√° recebendo do frontend?")
print("=" * 80)

print("""
PROBLEMA IDENTIFICADO:

No arquivo: backend/properties/services/property_service.py
Linhas 192-197:

    if not category and normalized_type in category_mapping:
        # Para tipos que t√™m subcategorias, usar 'Padr√£o' como default
        if normalized_type in ['APARTMENT', 'HOUSE', 'CASA_CONDOMINIO', 'CASA_VILA', ...]:
            normalized_category = 'Padr√£o'  # ‚Üê FOR√áA "Padr√£o" quando N√ÉO vem category!
        else:
            normalized_category = None

ISSO SIGNIFICA:
- Se category = None ‚Üí Usa "Padr√£o"
- Se category = "" (string vazia) ‚Üí Usa "Padr√£o"  
- Se category = "TERREA" ‚Üí Deveria mapear para "T√©rrea"

POSS√çVEIS CAUSAS:

1Ô∏è‚É£ Frontend n√£o est√° enviando o campo 'category'
   Solu√ß√£o: Verificar PropertyCreateStepperFixed.tsx

2Ô∏è‚É£ Frontend envia 'category' mas backend n√£o recebe
   Solu√ß√£o: Verificar serializa√ß√£o no propertiesService

3Ô∏è‚É£ Existe OUTRO lugar que reseta category antes de salvar
   Solu√ß√£o: Procurar por "prop.category =" no c√≥digo

COMO DIAGNOSTICAR:

Op√ß√£o A) Adicionar print tempor√°rio no backend:
   
   Arquivo: backend/properties/services/property_service.py
   Linha ~545 (dentro de _update_type_fields):
   
   def _update_type_fields(prop: Property, data: Dict[str, Any]) -> None:
       property_type = data.get('property_type')
       category = data.get('category')
       
       # ‚úÖ ADICIONAR ESTE PRINT:
       print(f"üîç DEBUG _update_type_fields:")
       print(f"   property_type recebido: {property_type}")
       print(f"   category recebido: {category}")
       print(f"   category is None? {category is None}")
       print(f"   category == ''? {category == ''}")

Op√ß√£o B) Verificar no navegador (DevTools):
   
   1. Abrir DevTools (F12)
   2. Aba Network
   3. Editar im√≥vel e selecionar "T√©rrea"
   4. Ver a requisi√ß√£o PATCH /api/properties/xxx
   5. Verificar o payload JSON enviado
   6. Confirmar se tem: "category": "TERREA"

Op√ß√£o C) Usar curl para testar diretamente:

   curl -X PATCH http://localhost:5000/api/properties/537 \\
     -H "Authorization: Bearer $TOKEN" \\
     -H "Content-Type: application/json" \\
     -d '{
       "property_type": "CASA_CONDOMINIO",
       "category": "TERREA"
     }'

""")

print("=" * 80)
print("Qual m√©todo voc√™ prefere usar para diagnosticar?")
print("1) Adicionar print no backend")
print("2) Verificar no DevTools do navegador")  
print("3) Testar com curl")
print("=" * 80)
