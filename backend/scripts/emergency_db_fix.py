#!/usr/bin/env python3
"""
Script de emerg√™ncia para corrigir colunas faltantes.
Execute este script se o banco estiver dispon√≠vel.

Uso: python emergency_db_fix.py
"""

import psycopg2
import os

def emergency_db_fix():
    """Corre√ß√£o de emerg√™ncia das colunas faltantes."""

    print("üö® CORRE√á√ÉO DE EMERG√äNCIA - Colunas de Endere√ßo")
    print("=" * 60)

    # Configura√ß√µes padr√£o (ajuste conforme necess√°rio)
    db_config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'database': os.getenv('DB_NAME', 'gandalf'),
        'user': os.getenv('DB_USER', 'postgres'),
        'password': os.getenv('DB_PASSWORD', ''),
        'port': os.getenv('DB_PORT', '5432')
    }

    print("üîß Tentando conectar ao banco de dados...")
    print(f"üìç Host: {db_config['host']}")
    print(f"üìç Banco: {db_config['database']}")
    print(f"üìç Usu√°rio: {db_config['user']}")
    print(f"üìç Porta: {db_config['port']}")

    # Comandos SQL para adicionar colunas
    sql_commands = [
        "ALTER TABLE property ADD COLUMN IF NOT EXISTS address_country VARCHAR(100) DEFAULT 'Brasil';",
        "ALTER TABLE property ADD COLUMN IF NOT EXISTS address_reference VARCHAR(255);",
        "ALTER TABLE property ADD COLUMN IF NOT EXISTS address_district VARCHAR(255);",
        "ALTER TABLE property ADD COLUMN IF NOT EXISTS zoning_type VARCHAR(100);",
        "ALTER TABLE property ADD COLUMN IF NOT EXISTS urban_zone VARCHAR(100);"
    ]

    try:
        # Conectar ao banco
        conn = psycopg2.connect(**db_config)
        conn.autocommit = True
        cursor = conn.cursor()

        print("\\nüîÑ Executando comandos SQL...")

        for i, sql in enumerate(sql_commands, 1):
            try:
                print(f"üìù Executando comando {i}/5...")
                cursor.execute(sql)
                print(f"‚úÖ Comando {i} executado com sucesso")
            except Exception as e:
                print(f"‚ö†Ô∏è  Comando {i} pode j√° existir ou teve erro: {e}")

        cursor.close()
        conn.close()

        print("\\nüéâ CORRE√á√ÉO CONCLU√çDA!")
        print("‚úÖ As colunas de endere√ßo foram adicionadas ao banco.")
        print("‚úÖ O erro de carregamento de propriedades foi resolvido.")
        print("\\nüöÄ Sistema pronto para uso!")

        return True

    except psycopg2.OperationalError as e:
        print(f"\\n‚ùå ERRO DE CONEX√ÉO: {e}")
        print("\\nüí° Verifique:")
        print("1. Se o PostgreSQL est√° rodando")
        print("2. Se as configura√ß√µes de conex√£o est√£o corretas")
        print("3. Se o banco de dados existe")

    except Exception as e:
        print(f"\\n‚ùå ERRO INESPERADO: {e}")

    # Instru√ß√µes manuais se a conex√£o autom√°tica falhar
    print("\\n" + "="*60)
    print("üìã INSTRU√á√ïES MANUAIS (se a corre√ß√£o autom√°tica falhou):")
    print("="*60)
    print("\\nExecute estes comandos SQL no seu banco PostgreSQL:")
    print()

    for i, sql in enumerate(sql_commands, 1):
        print(f"{i}. {sql}")

    print("\\nüîß Como executar:")
    print("1. Abra pgAdmin ou DBeaver")
    print("2. Conecte-se ao banco 'gandalf'")
    print("3. Abra um Query Tool")
    print("4. Execute cada comando acima")
    print("5. Reinicie a aplica√ß√£o")

    return False

if __name__ == "__main__":
    success = emergency_db_fix()

    if success:
        print("\\nüéØ PR√ìXIMOS PASSOS:")
        print("1. Reinicie a aplica√ß√£o Flask")
        print("2. Teste o carregamento de propriedades")
        print("3. Verifique se o erro foi resolvido")
    else:
        print("\\n‚ùå Execute as instru√ß√µes manuais acima para corrigir o problema.")
