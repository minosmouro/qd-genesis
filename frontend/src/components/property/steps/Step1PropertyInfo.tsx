import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { usePropertyCreate } from '@/contexts/PropertyCreateContext';
import { useSidebarContent } from '@/contexts/SidebarContentContext';
import { Home, Settings } from 'lucide-react';
import PropertyBasicSummary from '../widgets/PropertyBasicSummary';
import StepChecklistWidget from '../widgets/StepChecklistWidget';
import TipsWidget from '../widgets/TipsWidget';

// Constantes extra√≠das para evitar recria√ß√£o em cada render
const PROPERTY_FEATURES = [
  { id: 'pets_allowed', name: 'Aceita animais', icon: 'üêæ' },
  { id: 'air_conditioning', name: 'Ar-condicionado', icon: '‚ùÑÔ∏è' },
  { id: 'closet', name: 'Closet', icon: 'üëî' },
  { id: 'american_kitchen', name: 'Cozinha americana', icon: 'üç≥' },
  { id: 'fireplace', name: 'Lareira', icon: 'üî•' },
  { id: 'furnished', name: 'Mobiliado', icon: 'üõãÔ∏è' },
  { id: 'gourmet_balcony', name: 'Varanda gourmet', icon: 'üç∑' },
];

const PRIMARY_FEATURE_IDS = new Set(PROPERTY_FEATURES.map(feature => feature.id));

const FEATURE_LABEL_MAP: Record<string, string> = {
  office: 'Escrit√≥rio',
  balcony: 'Varanda',
  service_area: '√Årea de servi√ßo',
  maid_room: 'Depend√™ncia de empregados',
  barbecue_grill: 'Churrasqueira',
  garden: 'Jardim',
  terrace: 'Terra√ßo',
  pets_allowed: 'Aceita animais',
  air_conditioning: 'Ar-condicionado',
  closet: 'Closet',
  american_kitchen: 'Cozinha americana',
  fireplace: 'Lareira',
  furnished: 'Mobiliado',
  gourmet_balcony: 'Varanda gourmet',
};

const PROPERTY_TYPES = [
  { value: 'APARTMENT', label: 'Apartamento' },
  { value: 'HOUSE', label: 'Casa' },
  { value: 'CASA_CONDOMINIO', label: 'Casa de Condom√≠nio' },
  { value: 'CASA_VILA', label: 'Casa de Vila' },
  { value: 'COBERTURA', label: 'Cobertura' },
  { value: 'FAZENDA_SITIO_CHACARA', label: 'Fazenda/S√≠tio/Ch√°cara' },
  { value: 'FLAT', label: 'Flat' },
  { value: 'KITNET_CONJUGADO', label: 'Kitnet/Conjugado' },
  { value: 'LOFT', label: 'Loft' },
  { value: 'LOTE_TERRENO', label: 'Lote/Terreno' },
  { value: 'PREDIO_EDIFICIO_INTEIRO', label: 'Pr√©dio/Edif√≠cio Inteiro' },
  { value: 'STUDIO', label: 'Studio' },
];

const CUSTOM_FEATURE_OPTIONS = [
  'Conex√£o √† internet',
  'Ambientes integrados',
  'Andar inteiro',
  'Aqu√°rio',
  '√Årea de servi√ßo',
  'Arm√°rio embutido',
  'Arm√°rio embutido no quarto',
  'Arm√°rio na cozinha',
  'Arm√°rio no banheiro',
  'Banheira',
  'Banheiro de servi√ßo',
  'Bar',
  'Box blindex',
  'Carpete',
  'Casa de caseiro',
  'Casa de fundo',
  'Casa sede',
  'Churrasqueira na varanda',
  'Chuveiro a g√°s',
  'Cimento queimado',
  'Copa',
  'Cozinha gourmet',
  'Cozinha grande',
  'Depend√™ncia de empregados',
  'Dep√≥sito',
  'Despensa',
  'Drywall',
  'Ed√≠cula',
  'Escada',
  'Escrit√≥rio',
  'Fog√£o',
  'Forno de pizza',
  'Freezer',
  'Geminada',
  'Gesso - Sanca - Teto Rebaixado',
  'Hidromassagem',
  'Im√≥vel de esquina',
  'Interfone',
  'Isolamento ac√∫stico',
  'Isolamento t√©rmico',
  'Janela de alum√≠nio',
  'Janela grande',
  'Laje',
  'Lavabo',
  'Meio andar',
  'Mezanino',
  'M√≥vel planejado',
  'Muro de vidro',
  'Muro e grade',
  'Ofur√¥',
  'P√© direito alto',
  'Piscina privativa',
  'Piso de madeira',
  'Piso elevado',
  'Piso frio',
  'Piso laminado',
  'Piso vin√≠lico',
  'Platibanda',
  'Porcelanato',
  'Possui divis√≥ria',
  'Quarto de servi√ßo',
  'Quarto extra revers√≠vel',
  'Quintal',
  'Sala de almo√ßo',
  'Sala de jantar',
  'Sala grande',
  'Sala pequena',
  'TV a cabo',
  'Varanda',
  'Varanda fechada com vidro',
  'Ventila√ß√£o natural',
  'Vista para o mar',
  'Vista panor√¢mica',
  'Vista para a montanha',
  'Vista para lago',
];

const Step1PropertyInfo: React.FC = () => {
  const { formData, updateField } = usePropertyCreate();
  const { setSidebarContent } = useSidebarContent();

  // Injetar conte√∫do no sidebar direito
  useEffect(() => {
    setSidebarContent(
      <>
        <PropertyBasicSummary />
        <StepChecklistWidget />
        <TipsWidget />
      </>
    );

    // Limpar ao desmontar
    return () => setSidebarContent(null);
  }, [setSidebarContent]);

  // usar constantes memoizadas
  const propertyFeatures = PROPERTY_FEATURES;
  const propertyTypes = PROPERTY_TYPES;

  // Categorias dispon√≠veis baseadas no tipo selecionado (memo para performance)
  // IMPORTANTE: Valores devem corresponder exatamente ao backend (property_mapper.py)
  const availableCategories = useMemo(() => {
    const getCategoriesForType = (propertyType: string) => {
      const categoryMapping: Record<string, Array<{ value: string; label: string }>> = {
        APARTMENT: [
          { value: 'Padr√£o', label: 'Padr√£o' },
          { value: 'Duplex', label: 'Duplex' },
          { value: 'Triplex', label: 'Triplex' },
          { value: 'Studio', label: 'Studio' },
          { value: 'Cobertura', label: 'Cobertura' },
        ],
        HOUSE: [
          { value: 'T√©rrea', label: 'T√©rrea' },
          { value: 'Sobrado', label: 'Sobrado' },
          { value: 'Kitnet/Conjugado', label: 'Kitnet/Conjugado' },
          { value: 'Padr√£o', label: 'Padr√£o' },
        ],
        CASA_CONDOMINIO: [
          { value: 'T√©rrea', label: 'T√©rrea' },
          { value: 'Sobrado', label: 'Sobrado' },
          { value: 'Kitnet/Conjugado', label: 'Kitnet/Conjugado' },
          { value: 'Padr√£o', label: 'Padr√£o' },
        ],
        CONDOMINIUM: [ // Alias do CanalPro - MESMOS valores do backend
          { value: 'T√©rrea', label: 'T√©rrea' },
          { value: 'Sobrado', label: 'Sobrado' },
          { value: 'Kitnet/Conjugado', label: 'Kitnet/Conjugado' },
          { value: 'Padr√£o', label: 'Padr√£o' },
        ],
        CASA_VILA: [
          { value: 'T√©rrea', label: 'T√©rrea' },
          { value: 'Sobrado', label: 'Sobrado' },
          { value: 'Padr√£o', label: 'Padr√£o' },
        ],
        COBERTURA: [
          { value: 'Padr√£o', label: 'Padr√£o' },
          { value: 'Duplex', label: 'Duplex' },
          { value: 'Triplex', label: 'Triplex' },
        ],
        LOFT: [
          { value: 'Padr√£o', label: 'Padr√£o' },
          { value: 'Cobertura', label: 'Cobertura' },
          { value: 'Duplex', label: 'Duplex' },
          { value: 'Triplex', label: 'Triplex' },
        ],
        LOTE_TERRENO: [
          { value: 'Padr√£o', label: 'Padr√£o' },
          { value: 'Lote Condom√≠nio', label: 'Lote Condom√≠nio' },
          { value: 'Lote de Vila', label: 'Lote de Vila' },
        ],
      };

      return categoryMapping[propertyType] || [{ value: 'Padr√£o', label: 'Padr√£o' }];
    };

    return formData.property_type ? getCategoriesForType(formData.property_type) : [];
  }, [formData.property_type]);

  // handlers memoizados
  const toggleFeature = useCallback((featureId: string) => {
    const currentFeatures = formData.features || [];

    if (currentFeatures.includes(featureId)) {
      updateField('features', currentFeatures.filter(id => id !== featureId));
    } else {
      updateField('features', [...currentFeatures, featureId]);
    }
  }, [formData.features, updateField]);

  const isFeatureSelected = useCallback((featureId: string) => {
    const currentFeatures = formData.features || [];
    return currentFeatures.includes(featureId);
  }, [formData.features]);

  const handlePropertyTypeChange = useCallback((newType: string) => {
    updateField('property_type', newType);
    // Se o novo tipo n√£o suporta a categoria atual, reset√°-la
    const currentCategory = formData.category;
    const newCategories = ((): Array<{ value: string; label: string }> => {
      // IMPORTANTE: Valores devem corresponder exatamente ao backend (property_mapper.py)
      const mapping: Record<string, Array<{ value: string; label: string }>> = {
        APARTMENT: [
          { value: 'Padr√£o', label: 'Padr√£o' },
          { value: 'Duplex', label: 'Duplex' },
          { value: 'Triplex', label: 'Triplex' },
          { value: 'Studio', label: 'Studio' },
          { value: 'Cobertura', label: 'Cobertura' },
        ],
        HOUSE: [
          { value: 'T√©rrea', label: 'T√©rrea' },
          { value: 'Sobrado', label: 'Sobrado' },
          { value: 'Kitnet/Conjugado', label: 'Kitnet/Conjugado' },
          { value: 'Padr√£o', label: 'Padr√£o' },
        ],
        CASA_CONDOMINIO: [
          { value: 'T√©rrea', label: 'T√©rrea' },
          { value: 'Sobrado', label: 'Sobrado' },
          { value: 'Kitnet/Conjugado', label: 'Kitnet/Conjugado' },
          { value: 'Padr√£o', label: 'Padr√£o' },
        ],
        CONDOMINIUM: [ // Alias do CanalPro - MESMOS valores do backend
          { value: 'T√©rrea', label: 'T√©rrea' },
          { value: 'Sobrado', label: 'Sobrado' },
          { value: 'Kitnet/Conjugado', label: 'Kitnet/Conjugado' },
          { value: 'Padr√£o', label: 'Padr√£o' },
        ],
        CASA_VILA: [
          { value: 'T√©rrea', label: 'T√©rrea' },
          { value: 'Sobrado', label: 'Sobrado' },
          { value: 'Padr√£o', label: 'Padr√£o' },
        ],
        COBERTURA: [
          { value: 'Padr√£o', label: 'Padr√£o' },
          { value: 'Duplex', label: 'Duplex' },
          { value: 'Triplex', label: 'Triplex' },
        ],
        LOFT: [
          { value: 'Padr√£o', label: 'Padr√£o' },
          { value: 'Cobertura', label: 'Cobertura' },
          { value: 'Duplex', label: 'Duplex' },
          { value: 'Triplex', label: 'Triplex' },
        ],
        LOTE_TERRENO: [
          { value: 'Padr√£o', label: 'Padr√£o' },
          { value: 'Lote Condom√≠nio', label: 'Lote Condom√≠nio' },
          { value: 'Lote de Vila', label: 'Lote de Vila' },
        ],
      };
      return mapping[newType] || [{ value: 'Padr√£o', label: 'Padr√£o' }];
    })();

    if (currentCategory && !newCategories.find(cat => cat.value === currentCategory)) {
      updateField('category', '');
    }
  }, [formData.category, updateField]);

  // === Autocomplete / multi-select para 'Outras caracter√≠sticas' ===
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCustomFeatures, setSelectedCustomFeatures] = useState<string[]>(() =>
    formData.custom_features
      ? formData.custom_features.split(',').map(s => s.trim()).filter(Boolean)
      : []
  );
  // controlar exibi√ß√£o das sugest√µes (permitir abrir sem digitar)
  const [showSuggestions, setShowSuggestions] = useState(false);

  // Sincronizar selectedCustomFeatures ‚Üí formData.custom_features
  // APENAS quando o usu√°rio fizer uma mudan√ßa manual (n√£o em loops)
  const updateCustomFeatures = useCallback((features: string[]) => {
    setSelectedCustomFeatures(features);
    updateField('custom_features', features.join(', '));
  }, [updateField]);

  // Sincronizar formData.custom_features ‚Üí selectedCustomFeatures
  // APENAS na inicializa√ß√£o ou mudan√ßas externas
  useEffect(() => {
    const ctx = formData.custom_features || '';
    const fromCtx = ctx.split(',').map(s => s.trim()).filter(Boolean);
    
    // Comparar arrays diretamente, n√£o strings
    const isDifferent = 
      fromCtx.length !== selectedCustomFeatures.length ||
      fromCtx.some((item, index) => item !== selectedCustomFeatures[index]);
    
    // S√≥ atualizar se realmente diferente (evitar loop)
    if (isDifferent && ctx) {
      setSelectedCustomFeatures(fromCtx);
    }
  }, [formData.custom_features]); // ‚úÖ Correto: n√£o incluir selectedCustomFeatures

  useEffect(() => {
    const featureIds = formData.features || [];
    if (!featureIds || featureIds.length === 0) {
      return;
    }

    const primaryFeatures = featureIds.filter(id => PRIMARY_FEATURE_IDS.has(id));
    const extraFeatures = featureIds.filter(id => !PRIMARY_FEATURE_IDS.has(id));

    if (extraFeatures.length === 0) {
      return;
    }

    const translatedExtra = extraFeatures
      .map(id => FEATURE_LABEL_MAP[id] || id)
      .filter(Boolean);

    if (translatedExtra.length > 0) {
      // Atualizar o estado local diretamente sem usar updateCustomFeatures
      // para evitar loop infinito
      setSelectedCustomFeatures(prev => {
        const merged = new Set(prev);
        translatedExtra.forEach(label => merged.add(label));
        const newFeatures = Array.from(merged);
        
        // S√≥ atualizar se realmente mudou
        const newFeaturesStr = newFeatures.join(', ');
        const currentFeaturesStr = prev.join(', ');
        if (newFeaturesStr !== currentFeaturesStr) {
          // Atualizar o campo no contexto tamb√©m
          updateField('custom_features', newFeaturesStr);
          return newFeatures;
        }
        return prev;
      });
    }

    if (primaryFeatures.length !== featureIds.length) {
      updateField('features', primaryFeatures);
    }
  }, [formData.features, updateField]); // ‚Üê Correto: n√£o incluir selectedCustomFeatures

  const addOption = useCallback((opt: string) => {
    if (!opt) return;
    if (selectedCustomFeatures.includes(opt)) return;
    updateCustomFeatures([...selectedCustomFeatures, opt]);
    setSearchTerm('');
    setShowSuggestions(false);
  }, [selectedCustomFeatures, updateCustomFeatures]);

  const removeOption = useCallback((opt: string) => {
    updateCustomFeatures(selectedCustomFeatures.filter(x => x !== opt));
  }, [selectedCustomFeatures, updateCustomFeatures]);

  const filtered = useMemo(() => {
    return CUSTOM_FEATURE_OPTIONS.filter(o => {
      if (selectedCustomFeatures.includes(o)) return false;
      if (!searchTerm.trim()) return true; // mostrar todas quando n√£o digitado
      return o.toLowerCase().includes(searchTerm.toLowerCase());
    });
  }, [searchTerm, selectedCustomFeatures]);

  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      const exact = CUSTOM_FEATURE_OPTIONS.find(
        o => o.toLowerCase() === searchTerm.trim().toLowerCase()
      );
      addOption((exact as string) || searchTerm.trim());
    }
  }, [searchTerm, addOption]);

  // --- Melhor controle para inputs num√©ricos: usar estado local e atualizar contexto no onBlur ---
  const [usableAreasInput, setUsableAreasInput] = useState<string | number>(formData.usable_areas ?? '');
  const [totalAreasInput, setTotalAreasInput] = useState<string | number>(formData.total_areas ?? '');

  useEffect(() => {
    setUsableAreasInput(formData.usable_areas ?? '');
  }, [formData.usable_areas]);

  useEffect(() => {
    setTotalAreasInput(formData.total_areas ?? '');
  }, [formData.total_areas]);

  return (
    <div className="h-full flex flex-col">
      {/* Layout Principal com espa√ßamento padronizado */}
      <div className="flex-1 space-y-6 overflow-visible">
        {/* Informa√ß√µes B√°sicas */}
        <div className="bg-surface border border-border rounded-lg p-6">
          <h3 className="text-base font-semibold text-text-primary mb-2 flex items-center">
            <Home className="w-4 h-4 mr-2 text-primary" />
            Informa√ß√µes B√°sicas
          </h3>

          <div className="space-y-4">
            {/* Identifica√ß√£o - somente leitura */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  C√≥digo do Im√≥vel
                </label>
                <div className="inline-flex items-center gap-1 px-2 py-1 rounded bg-primary/10 text-primary text-xs font-semibold">
                  {formData.property_code || '‚Äî'}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  ID Externo
                </label>
                <div className="text-sm text-text-secondary">
                  {formData.external_id || '‚Äî'}
                </div>
              </div>
            </div>

            {/* Tipo de Uso */}
            <div>
              <label className="block text-sm font-medium text-text-primary mb-2">
                Finalidade de Uso *
              </label>
              <div className="grid grid-cols-2 gap-4">
                {[
                  {
                    value: 'RESIDENTIAL',
                    label: 'Residencial',
                    emoji: 'üè†',
                    desc: 'Para moradia',
                  },
                  {
                    value: 'COMMERCIAL',
                    label: 'Comercial',
                    emoji: 'üè¢',
                    desc: 'Para neg√≥cios',
                  },
                ].map(option => {
                  const isSelected = formData.usage_type === option.value;
                  return (
                    <button
                      key={option.value}
                      onClick={() => updateField('usage_type', option.value)}
                      className={`
												p-2 rounded-lg border transition-all duration-200 text-left
												${
                          isSelected
                            ? 'bg-primary/10 border-primary text-primary'
                            : 'bg-background border-border text-text-primary hover:bg-surface hover:border-primary/30'
                        }
											`}
                    >
                      <div className="flex items-center mb-1">
                        <span className="text-lg mr-2">{option.emoji}</span>
                        <span className="font-medium">{option.label}</span>
                      </div>
                      <p className="text-xs opacity-70">{option.desc}</p>
                    </button>
                  );
                })}
              </div>
            </div>

            {/* Tipo de Im√≥vel e Categoria */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  Tipo de Im√≥vel *
                </label>
                <select
                  value={formData.property_type || ''}
                  onChange={e => handlePropertyTypeChange(e.target.value)}
                  className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                >
                  <option value="">Selecione o tipo</option>
                  {propertyTypes.map(type => (
                    <option key={type.value} value={type.value}>
                      {type.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  Categoria *
                </label>
                <select
                  value={formData.category || ''}
                  onChange={e => updateField('category', e.target.value)}
                  disabled={!formData.property_type}
                  className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <option value="">
                    {formData.property_type
                      ? 'Selecione a categoria'
                      : 'Primeiro selecione o tipo'}
                  </option>
                  {availableCategories.map(category => (
                    <option key={category.value} value={category.value}>
                      {category.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            <p className="text-xs text-text-secondary -mt-2">
              Categoria: especifica√ß√£o adicional do tipo de im√≥vel (Padr√£o para
              im√≥veis convencionais)
            </p>

            {/* Informa√ß√µes Num√©ricas */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  Quartos
                </label>
                <input
                  type="number"
                  placeholder="3"
                  min="0"
                  value={formData.bedrooms || ''}
                  onChange={e =>
                    updateField(
                      'bedrooms',
                      e.target.value ? parseInt(e.target.value) : undefined
                    )
                  }
                  className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  Banheiros
                </label>
                <input
                  type="number"
                  placeholder="2"
                  min="0"
                  value={formData.bathrooms || ''}
                  onChange={e =>
                    updateField(
                      'bathrooms',
                      e.target.value ? parseInt(e.target.value) : undefined
                    )
                  }
                  className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  Su√≠tes
                </label>
                <input
                  type="number"
                  placeholder="1"
                  min="0"
                  value={formData.suites || ''}
                  onChange={e =>
                    updateField(
                      'suites',
                      e.target.value ? parseInt(e.target.value) : undefined
                    )
                  }
                  className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  Vagas
                </label>
                <input
                  type="number"
                  placeholder="2"
                  min="0"
                  value={formData.parking_spaces || ''}
                  onChange={e =>
                    updateField(
                      'parking_spaces',
                      e.target.value ? parseInt(e.target.value) : undefined
                    )
                  }
                  className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                />
              </div>
            </div>

            {/* √Åreas */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label htmlFor="usable_areas" className="block text-sm font-medium text-text-primary mb-1">
                  √Årea √ötil (m¬≤)
                </label>
                <input
                  id="usable_areas"
                  type="number"
                  placeholder="80"
                  min="0"
                  step="0.01"
                  value={usableAreasInput ?? ''}
                  onChange={e => setUsableAreasInput(e.target.value)}
                  onBlur={() => updateField('usable_areas', usableAreasInput ? parseFloat(String(usableAreasInput)) : undefined)}
                  className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                />
              </div>

              <div>
                <label htmlFor="total_areas" className="block text-sm font-medium text-text-primary mb-1">
                  √Årea Total (m¬≤)
                </label>
                <input
                  id="total_areas"
                  type="number"
                  placeholder="100"
                  min="0"
                  step="0.01"
                  value={totalAreasInput ?? ''}
                  onChange={e => setTotalAreasInput(e.target.value)}
                  onBlur={() => updateField('total_areas', totalAreasInput ? parseFloat(String(totalAreasInput)) : undefined)}
                  className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                />
              </div>
            </div>

            {/* Campos espec√≠ficos para Apartamento, Flat e Studio */}
            {(formData.property_type === 'APARTMENT' ||
              formData.property_type === 'FLAT' ||
              formData.property_type === 'STUDIO') && (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3 bg-primary/5 p-3 rounded-lg border border-primary/20">
                <div>
                  <label className="block text-sm font-medium text-text-primary mb-1">
                    Unidade
                  </label>
                  <input
                    type="text"
                    placeholder="101, 2A, 504..."
                    value={formData.unit || ''}
                    onChange={e => updateField('unit', e.target.value)}
                    className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-primary mb-1">
                    Bloco
                  </label>
                  <input
                    type="text"
                    placeholder="A, B, Torre 1..."
                    value={formData.block || ''}
                    onChange={e => updateField('block', e.target.value)}
                    className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-text-primary mb-1">
                    Andar da Unidade
                  </label>
                  <input
                    type="number"
                    placeholder="5"
                    min="0"
                    value={formData.unit_floor || ''}
                    onChange={e => 
                      updateField(
                        'unit_floor', 
                        e.target.value ? parseInt(e.target.value) : undefined
                      )
                    }
                    className="w-full px-3 py-1.5 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                  />
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Caracter√≠sticas do Im√≥vel */}
        <div className="bg-surface border border-border rounded-lg p-6">
          <h3 className="text-base font-semibold text-text-primary mb-2 flex items-center">
            <Settings className="w-4 h-4 mr-2 text-secondary" />
            Caracter√≠sticas do Im√≥vel
          </h3>

          {/* Mostrar caracter√≠sticas em duas linhas com 6 cards por linha */}
          <div className="grid grid-cols-6 gap-1 mb-3 grid-rows-2">
            {propertyFeatures.map(feature => {
              const isSelected = isFeatureSelected(feature.id);
              return (
                <button
                  key={feature.id}
                  onClick={() => toggleFeature(feature.id)}
                  title={feature.name}
                  className={`flex items-center gap-2 h-8 px-2 rounded-md border transition-colors text-xs truncate select-none
                    ${
                      isSelected
                        ? 'bg-secondary/10 border-secondary text-secondary'
                        : 'bg-background border-border text-text-secondary hover:bg-surface hover:border-secondary/30'
                    }
                  `}
                >
                  <span className="text-sm">{feature.icon}</span>
                  <span className="truncate">{feature.name}</span>
                </button>
              );
            })}
          </div>

          {/* Campo para caracter√≠sticas personalizadas */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-1">
              Outras caracter√≠sticas (opcional)
            </label>

            <div>
              <div className="flex flex-wrap gap-2 mb-2">
                {selectedCustomFeatures.map((f, i) => (
                  <span key={f + i} className="flex items-center text-xs px-2 py-1 bg-surface border border-border rounded-full">
                    <span className="mr-2">{f}</span>
                    <button type="button" onClick={() => removeOption(f)} className="text-xs text-text-secondary hover:text-red-600">√ó</button>
                  </span>
                ))}
              </div>

              <div className="relative">
                <input
                  type="text"
                  value={searchTerm}
                  onChange={e => setSearchTerm(e.target.value)}
                  onKeyDown={handleKeyDown}
                  onFocus={() => setShowSuggestions(true)}
                  onClick={() => setShowSuggestions(true)}
                  onBlur={() => setTimeout(() => setShowSuggestions(false), 120)}
                  placeholder="Buscar ou adicionar (pressione Enter para adicionar)"
                  className="w-full px-3 py-2 border border-border bg-background text-text-primary rounded-md focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary"
                />

                {showSuggestions && (
                  <div className="absolute left-0 right-0 mt-1 bg-surface border border-border rounded-md max-h-48 overflow-auto z-20">
                    {filtered.length > 0 ? (
                      filtered.map(opt => (
                        <div
                          key={opt}
                          onMouseDown={() => addOption(opt)}
                          className="px-3 py-2 cursor-pointer hover:bg-primary/10"
                        >
                          {opt}
                        </div>
                      ))
                    ) : (
                      <div className="px-3 py-2 text-text-secondary">Nenhuma op√ß√£o. Pressione Enter para adicionar.</div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Resumo migrado para o sidebar direito */}
      </div>
    </div>
  );
};

export default Step1PropertyInfo;
